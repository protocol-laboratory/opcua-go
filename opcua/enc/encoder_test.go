package enc

import (
	"fmt"
	"reflect"
	"testing"

	"github.com/protocol-laboratory/opcua-go/opcua/uamsg"
	"github.com/protocol-laboratory/opcua-go/opcua/util"
)

type encodeArgs struct {
	v         *uamsg.Message
	chunkSize int
}

type encodeTestCase struct {
	name    string
	e       *DefaultEncoder
	args    encodeArgs
	want    [][]byte
	wantErr bool
}

func getTestCases() []*encodeTestCase {
	testCases := make([]*encodeTestCase, 0)
	testCases = append(testCases, getHelloMsgTestCase())
	testCases = append(testCases, getAcknowledgeMsgTestCase())
	testCases = append(testCases, getOpenSecureChannelRequestMsgTestCase())
	testCases = append(testCases, getOpenSecureChannelResponseMsgTestCase())
	testCases = append(testCases, getCreateSessionRequestMsgTestCase())
	testCases = append(testCases, getActiveSessionRequestMsgTestCase())
	testCases = append(testCases, getActiveSessionResponseMsgTestCase())
	return testCases
}

func TestDefaultEncoder_Encode(t *testing.T) {
	tests := getTestCases()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.e.Encode(tt.args.v, tt.args.chunkSize)
			if (err != nil) != tt.wantErr {
				t.Errorf("DefaultEncoder.Encode() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !reflect.DeepEqual(got, tt.want) {
				showByteSlice(got[0])
				t.Errorf("DefaultEncoder.Encode() = %v, want %v", got, tt.want)
			}
		})
	}
}

// used to debug
func showByteSlice(s []byte) {
	for i, r := range s {
		if i != 0 {
			if i%16 == 0 {
				fmt.Print("\n")
			} else {
				fmt.Print(" ")
			}
		}
		fmt.Printf("%02x", r)
	}
	fmt.Println()
}

func getHelloMsgTestCase() *encodeTestCase {
	return &encodeTestCase{
		name: "encode hello msg",
		e:    NewDefaultEncoder(64 * 1024),
		args: encodeArgs{
			v: &uamsg.Message{
				MessageHeader: &uamsg.MessageHeader{
					MessageType: uamsg.HelloMessageType,
				},
				MessageBody: &uamsg.HelloMessageExtras{
					ProtocolVersion:   0,
					ReceiveBufferSize: 65535,
					SendBufferSize:    65535,
					MaxMessageSize:    0,
					MaxChunkCount:     0,
					EndpointUrl:       "opc.tcp://localhost:53530/OPCUA/SimulationServer",
				},
			},
			chunkSize: 1024,
		},
		want: [][]byte{
			{0x48, 0x45, 0x4c, 0x46, 0x50, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0, 0x0, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x2f, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x2f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72},
		},
		wantErr: false,
	}

}

func getAcknowledgeMsgTestCase() *encodeTestCase {
	return &encodeTestCase{
		name: "encode acknowledge msg",
		e:    NewDefaultEncoder(64 * 1024),
		args: encodeArgs{
			v: &uamsg.Message{
				MessageHeader: &uamsg.MessageHeader{
					MessageType: uamsg.AcknowledgeMessageType,
				},
				MessageBody: &uamsg.AcknowledgeMessageExtras{
					ProtocolVersion:   0,
					ReceiveBufferSize: 8196,
					SendBufferSize:    8196,
					MaxMessageSize:    4194240,
					MaxChunkCount:     0,
				},
			},
			chunkSize: 1024,
		},
		want: [][]byte{
			{0x41, 0x43, 0x4b, 0x46, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x20, 0x0, 0x0, 0x4, 0x20, 0x0, 0x0, 0xc0, 0xff, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0},
		},
		wantErr: false,
	}
}

func getOpenSecureChannelRequestMsgTestCase() *encodeTestCase {
	return &encodeTestCase{
		name: "encode open secure channel request msg",
		e:    NewDefaultEncoder(64 * 1024),
		args: encodeArgs{
			v: &uamsg.Message{
				MessageHeader: &uamsg.MessageHeader{
					MessageType:     uamsg.OpenSecureChannelMessageType,
					SecureChannelId: util.GetPtr(uint32(0)),
				},
				SecurityHeader: &uamsg.AsymmetricSecurityHeader{
					SecurityPolicyUri:             []byte("http://opcfoundation.org/UA/SecurityPolicy#None"),
					SenderCertificate:             nil,
					ReceiverCertificateThumbprint: nil,
				},
				SequenceHeader: &uamsg.SequenceHeader{
					SequenceNumber: 1,
					RequestId:      1,
				},
				MessageBody: &uamsg.GenericBody{
					TypeId: &uamsg.ExpandedNodeId{
						NodeId: &uamsg.ObjectOpenSecureChannelRequest_Encoding_DefaultBinary,
					},
					Service: &uamsg.OpenSecureChannelRequest{
						Header: &uamsg.RequestHeader{
							AuthenticationToken: &uamsg.NodeId{
								EncodingType: uamsg.TwoByte,
								Identifier:   byte(0),
							},
							Timestamp:         133722676057222478,
							RequestHandle:     1,
							ReturnDiagnostics: 0,
							AuditEntryId:      "",
							TimeoutHint:       10000,
							AdditionalHeader: &uamsg.ExtensionObject{
								TypeId: &uamsg.NodeId{
									EncodingType: uamsg.TwoByte,
									Identifier:   byte(0),
								},
								Encoding: 0x00,
							},
						},
						ClientProtocolVersion: 0,
						RequestType:           0,
						SecurityMode:          1,
						ClientNonce:           []byte{},
						RequestedLifetime:     3600000,
					},
				},
			},
			chunkSize: 10240,
		},
		want: [][]byte{
			{0x4f, 0x50, 0x4e, 0x46, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x4e, 0x6f, 0x6e, 0x65, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0xbe, 0x1, 0x0, 0x0, 0x4e, 0x2d, 0xce, 0xbc, 0x10, 0x14, 0xdb, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x10, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xee, 0x36, 0x0},
		},
		wantErr: false,
	}
}

func getOpenSecureChannelResponseMsgTestCase() *encodeTestCase {
	return &encodeTestCase{
		name: "encode open secure channel response msg",
		e:    NewDefaultEncoder(64 * 1024),
		args: encodeArgs{
			v: &uamsg.Message{
				MessageHeader: &uamsg.MessageHeader{
					MessageType:     uamsg.OpenSecureChannelMessageType,
					SecureChannelId: util.GetPtr(uint32(2)),
				},
				SecurityHeader: &uamsg.AsymmetricSecurityHeader{
					SecurityPolicyUri:             []byte("http://opcfoundation.org/UA/SecurityPolicy#None"),
					SenderCertificate:             nil,
					ReceiverCertificateThumbprint: nil,
				},
				SequenceHeader: &uamsg.SequenceHeader{
					SequenceNumber: 489,
					RequestId:      1,
				},
				MessageBody: &uamsg.GenericBody{
					TypeId: &uamsg.ExpandedNodeId{
						NodeId: &uamsg.ObjectOpenSecureChannelResponse_Encoding_DefaultBinary,
					},
					Service: &uamsg.OpenSecureChannelResponse{
						Header: &uamsg.ResponseHeader{
							Timestamp:     0,
							RequestHandle: 1,
							ServiceResult: 0,
							ServiceDiagnostics: &uamsg.DiagnosticInfo{
								EncodingMask: 0x00,
							},
							StringTable: nil,
							AdditionalHeader: &uamsg.ExtensionObject{
								TypeId: &uamsg.NodeId{
									EncodingType: uamsg.TwoByte,
									Identifier:   byte(0),
								},
								Encoding: 0x00,
							},
						},
						ServerProtocolVersion: 0,
						SecurityToken: &uamsg.ChannelSecurityToken{
							ChannelID:       2,
							TokenID:         1,
							CreatedAt:       133722676057220000,
							RevisedLifetime: 3600000,
						},
						ServerNonce: []byte{},
					},
				},
			},
			chunkSize: 10240,
		},
		want: [][]byte{
			{0x4f, 0x50, 0x4e, 0x46, 0x87, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x63, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x55, 0x41, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x23, 0x4e, 0x6f, 0x6e, 0x65, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe9, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0xc1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa0, 0x23, 0xce, 0xbc, 0x10, 0x14, 0xdb, 0x1, 0x80, 0xee, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0},
		},
		wantErr: false,
	}
}

func getCreateSessionRequestMsgTestCase() *encodeTestCase {
	return &encodeTestCase{
		name: "encode create session request msg",
		e:    NewDefaultEncoder(64 * 1024),
		args: encodeArgs{
			v: &uamsg.Message{
				MessageHeader: &uamsg.MessageHeader{
					MessageType:     uamsg.MsgMessageType,
					SecureChannelId: util.GetPtr(uint32(2)),
				},
				SecurityHeader: &uamsg.SymmetricSecurityHeader{
					TokenId: 1,
				},
				SequenceHeader: &uamsg.SequenceHeader{
					SequenceNumber: 2,
					RequestId:      2,
				},
				MessageBody: &uamsg.GenericBody{
					TypeId: &uamsg.ExpandedNodeId{
						NodeId: &uamsg.ObjectCreateSessionRequest_Encoding_DefaultBinary,
					},
					Service: &uamsg.CreateSessionRequest{
						Header: &uamsg.RequestHeader{
							AuthenticationToken: &uamsg.NodeId{
								EncodingType: uamsg.TwoByte,
								Identifier:   byte(0),
							},
							Timestamp:         133722676057239113,
							RequestHandle:     2,
							ReturnDiagnostics: 0,
							AuditEntryId:      "",
							TimeoutHint:       10000,
							AdditionalHeader: &uamsg.ExtensionObject{
								TypeId: &uamsg.NodeId{
									EncodingType: uamsg.TwoByte,
									Identifier:   byte(0),
								},
								Encoding: 0x00,
							},
						},
						ClientDescription: &uamsg.ApplicationDescription{
							ApplicationUri: "urn:gopcua:client",
							ProductUri:     "urn:gopcua",
							ApplicationName: &uamsg.LocalizedText{
								EncodingMask: 0x02,
								Text:         "gopcua - OPC UA implementation in Go",
							},
							ApplicationType:     1,
							GatewayServerUri:    "",
							DiscoveryProfileUri: "",
							DiscoveryUrls:       nil,
						},
						ServerUri:               "",
						EndpointUrl:             "opc.tcp://localhost:53530/OPCUA/SimulationServer",
						SessionName:             "gopcua-1727794005723911300",
						ClientNonce:             []byte{0xaf, 0x2c, 0xa6, 0x85, 0x34, 0x36, 0x66, 0xaf, 0x4c, 0xc8, 0x4d, 0xdf, 0xf2, 0xb8, 0x11, 0x4b, 0x85, 0x37, 0x25, 0xac, 0x9c, 0x2a, 0x20, 0xdf, 0xb3, 0x16, 0x7b, 0x15, 0x5f, 0x7e, 0x71, 0xb1},
						ClientCertificate:       nil,
						RequestedSessionTimeout: 1200000.0,
						MaxResponseMessageSize:  0,
					},
				},
			},
			chunkSize: 10240,
		},
		want: [][]byte{
			{0x4d, 0x53, 0x47, 0x46, 0x1f, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0xcd, 0x1, 0x0, 0x0, 0x49, 0x6e, 0xce, 0xbc, 0x10, 0x14, 0xdb, 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x10, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x75, 0x72, 0x6e, 0x3a, 0x67, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x3a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xa, 0x0, 0x0, 0x0, 0x75, 0x72, 0x6e, 0x3a, 0x67, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2, 0x24, 0x0, 0x0, 0x0, 0x67, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x20, 0x2d, 0x20, 0x4f, 0x50, 0x43, 0x20, 0x55, 0x41, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x47, 0x6f, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x0, 0x0, 0x0, 0x6f, 0x70, 0x63, 0x2e, 0x74, 0x63, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x35, 0x33, 0x35, 0x33, 0x30, 0x2f, 0x4f, 0x50, 0x43, 0x55, 0x41, 0x2f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0, 0x0, 0x0, 0x67, 0x6f, 0x70, 0x63, 0x75, 0x61, 0x2d, 0x31, 0x37, 0x32, 0x37, 0x37, 0x39, 0x34, 0x30, 0x30, 0x35, 0x37, 0x32, 0x33, 0x39, 0x31, 0x31, 0x33, 0x30, 0x30, 0x20, 0x0, 0x0, 0x0, 0xaf, 0x2c, 0xa6, 0x85, 0x34, 0x36, 0x66, 0xaf, 0x4c, 0xc8, 0x4d, 0xdf, 0xf2, 0xb8, 0x11, 0x4b, 0x85, 0x37, 0x25, 0xac, 0x9c, 0x2a, 0x20, 0xdf, 0xb3, 0x16, 0x7b, 0x15, 0x5f, 0x7e, 0x71, 0xb1, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x80, 0x4f, 0x32, 0x41, 0x0, 0x0, 0x0, 0x0},
		},
		wantErr: false,
	}
}

func getActiveSessionRequestMsgTestCase() *encodeTestCase {
	return &encodeTestCase{
		name: "encode active session request msg",
		e:    NewDefaultEncoder(64 * 1024),
		args: encodeArgs{
			v: &uamsg.Message{
				MessageHeader: &uamsg.MessageHeader{
					MessageType:     uamsg.MsgMessageType,
					SecureChannelId: util.GetPtr(uint32(2)),
				},
				SecurityHeader: &uamsg.SymmetricSecurityHeader{
					TokenId: 1,
				},
				SequenceHeader: &uamsg.SequenceHeader{
					SequenceNumber: 3,
					RequestId:      3,
				},
				MessageBody: &uamsg.GenericBody{
					TypeId: &uamsg.ExpandedNodeId{
						NodeId: &uamsg.ObjectActivateSessionRequest_Encoding_DefaultBinary,
					},
					Service: &uamsg.ActivateSessionRequest{
						Header: &uamsg.RequestHeader{
							AuthenticationToken: &uamsg.NodeId{
								EncodingType: uamsg.ByteString,
								Namespace:    0,
								Identifier:   []byte{0xbe, 0x16, 0x6c, 0x98, 0x7, 0x4f, 0x24, 0x62, 0x70, 0x69, 0xea, 0xd, 0x88, 0x24, 0x82, 0xa9, 0x55, 0x10, 0x27, 0xbd, 0x47, 0x95, 0x77, 0xea, 0x4, 0xcc, 0x7a, 0x4d, 0xe2, 0x87, 0x33, 0xae},
							},
							Timestamp:         133722676058176687,
							RequestHandle:     3,
							ReturnDiagnostics: 0,
							AuditEntryId:      "",
							TimeoutHint:       10000,
							AdditionalHeader: &uamsg.ExtensionObject{
								TypeId: &uamsg.NodeId{
									EncodingType: uamsg.TwoByte,
									Identifier:   byte(0),
								},
								Encoding: 0x00,
							},
						},
						ClientSignature: &uamsg.SignatureData{
							Algorithm: "",
							Signature: nil,
						},
						ClientSoftwareCertificates: nil,
						LocaleIds:                  []uamsg.LocalId{"en-us"},
						UserIdentityToken: &uamsg.ExtensionObject{
							TypeId: &uamsg.NodeId{
								EncodingType: uamsg.FourByte,
								Namespace:    0,
								Identifier:   uint16(321),
							},
							Encoding: 0x01,
							Body:     "anonymous",
						},
						UserTokenSignature: &uamsg.SignatureData{
							Algorithm: "",
							Signature: nil,
						},
					},
				},
			},
			chunkSize: 10240,
		},
		want: [][]byte{
			{0x4d, 0x53, 0x47, 0x46, 0x95, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0x0, 0xd3, 0x1, 0x5, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0xbe, 0x16, 0x6c, 0x98, 0x7, 0x4f, 0x24, 0x62, 0x70, 0x69, 0xea, 0xd, 0x88, 0x24, 0x82, 0xa9, 0x55, 0x10, 0x27, 0xbd, 0x47, 0x95, 0x77, 0xea, 0x4, 0xcc, 0x7a, 0x4d, 0xe2, 0x87, 0x33, 0xae, 0xaf, 0xbc, 0xdc, 0xbc, 0x10, 0x14, 0xdb, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x10, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x65, 0x6e, 0x2d, 0x75, 0x73, 0x1, 0x0, 0x41, 0x1, 0x1, 0xd, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		},
		wantErr: false,
	}
}

func getActiveSessionResponseMsgTestCase() *encodeTestCase {
	return &encodeTestCase{
		name: "encode active session response msg",
		e:    NewDefaultEncoder(64 * 1024),
		args: encodeArgs{
			v: &uamsg.Message{
				MessageHeader: &uamsg.MessageHeader{
					MessageType:     uamsg.MsgMessageType,
					SecureChannelId: util.GetPtr(uint32(2)),
				},
				SecurityHeader: &uamsg.SymmetricSecurityHeader{
					TokenId: 1,
				},
				SequenceHeader: &uamsg.SequenceHeader{
					SequenceNumber: 496,
					RequestId:      3,
				},
				MessageBody: &uamsg.GenericBody{
					TypeId: &uamsg.ExpandedNodeId{
						NodeId: &uamsg.ObjectActivateSessionResponse_Encoding_DefaultBinary,
					},
					Service: &uamsg.ActivateSessionResponse{
						Header: &uamsg.ResponseHeader{
							Timestamp:     133722676058210000,
							RequestHandle: 3,
							ServiceResult: 0,
							ServiceDiagnostics: &uamsg.DiagnosticInfo{
								EncodingMask: 0x00,
							},
							StringTable: nil,
							AdditionalHeader: &uamsg.ExtensionObject{
								TypeId: &uamsg.NodeId{
									EncodingType: uamsg.TwoByte,
									Identifier:   byte(0),
								},
								Encoding: 0x00,
							},
						},
						ServerNonce:     []byte{0x8, 0xaa, 0xb2, 0x7c, 0x2f, 0xda, 0x8, 0x52, 0x3f, 0xdc, 0xb3, 0x63, 0xb2, 0x31, 0x31, 0x44, 0x5c, 0x9e, 0x9, 0xcb, 0xa2, 0x4d, 0x90, 0x15, 0xb, 0x8e, 0x2c, 0xe8, 0x4, 0xc6, 0xd4, 0xb8},
						Results:         nil,
						DiagnosticInfos: nil,
					},
				},
			},
			chunkSize: 10240,
		},
		want: [][]byte{
			{0x4d, 0x53, 0x47, 0x46, 0x60, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf0, 0x1, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0x0, 0xd6, 0x1, 0xd0, 0x3e, 0xdd, 0xbc, 0x10, 0x14, 0xdb, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x8, 0xaa, 0xb2, 0x7c, 0x2f, 0xda, 0x8, 0x52, 0x3f, 0xdc, 0xb3, 0x63, 0xb2, 0x31, 0x31, 0x44, 0x5c, 0x9e, 0x9, 0xcb, 0xa2, 0x4d, 0x90, 0x15, 0xb, 0x8e, 0x2c, 0xe8, 0x4, 0xc6, 0xd4, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		},
		wantErr: false,
	}
}
